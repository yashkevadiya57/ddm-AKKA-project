akka {
  actor {
    provider = "cluster"

    serializers {
      java = "akka.serialization.JavaSerializer"
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      #kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      #kryo = "com.twitter.chill.akka.ConfiguredAkkaSerializer"
      #kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "de.ddm.serialization.AkkaSerializable" = jackson-cbor
      #"de.ddm.actors.patterns.LargeMessageProxy.BytesMessage" = kryo
      #"akka.actor.typed.ActorRef" = jackson-cbor
      #"akka.actor.typed.internal.adapter.ActorRefAdapter" = jackson-cbor
    }

    # Use this setting to test serialization of messages in a local scenario.
    # serialize-messages = on

    enable-additional-serialization-bindings = on
    allow-java-serialization = off

    guardian-supervisor-strategy = "akka.actor.StoppingSupervisorStrategy"
  }

  remote {
    # https://doc.akka.io/docs/akka/2.5/remoting-artery.html#dedicated-subchannel-for-large-messages
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "localhost"
      canonical.port = 2551
      large-message-destinations = [
        "/user/*/largeMessageProxy",
        "/user/**/largeMessageProxy",
      ]
      advanced {
        maximum-large-frame-size = 2 MiB
        large-buffer-pool-size = 32
        outbound-large-message-queue-size = 256
      }
    }

    log-received-messages = off
    log-sent-messages = off
  }

  cluster {
    min-nr-of-members = 1
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    gossip-interval = 1s
    gossip-time-to-live = 2s
    leader-actions-interval = 1s

    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      heartbeat-interval = 2s
      threshold = 12.0
      max-sample-size = 1000
      min-std-deviation = 100ms
      acceptable-heartbeat-pause = 10s
      monitored-by-nr-of-members = 5
      expected-response-after = 2s
    }

    # Sigar native library extract location during tests.
    # Note: use per-jvm-instance folder when running multiple jvm on one host.
#    metrics.native-library-extract-folder=${user.dir}/target/native
  }

  coordinated-shutdown {
    run-by-actor-system-terminate = on
    terminate-actor-system = on
  }


  worker-pool-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 32
    }
    throughput = 1
  }

  master-pinned-dispatcher {
    type = PinnedDispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 1
      allow-core-timeout = off
    }
    throughput = 1
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG" #"INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Enable metrics extension in akka-cluster-metrics.
#  extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
}